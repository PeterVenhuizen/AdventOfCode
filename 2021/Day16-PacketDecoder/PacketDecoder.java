import java.io.*;
import java.util.*;
import java.util.stream.Collectors;

record Resolved(long size, long value) {}

public class PacketDecoder {
	public static long VERSION_SUM = 0L;

	public static Map<String, String> HEX2BIN = new HashMap<>() {{
		put("0", "0000");
		put("1", "0001");
		put("2", "0010");
		put("3", "0011");
		put("4", "0100");
		put("5", "0101");
		put("6", "0110");
		put("7", "0111");
		put("8", "1000");
		put("9", "1001");
		put("A", "1010");
		put("B", "1011");
		put("C", "1100");
		put("D", "1101");
		put("E", "1110");
		put("F", "1111");
	}};

	public static String convertToBinary(String input) {
		return input.chars()
			// .mapToObj(c -> Integer.toString(c))
			.mapToObj(c -> (char)c)
			.map(k -> HEX2BIN.get(Character.toString(k)))
			.collect(Collectors.joining(""));
	}

	public static long binaryToDecimal(String binary) {
		return Long.parseLong(binary, 2);
	}

	public static long doMath(Long packetType, List<Long> values) {

		long result = 0L;

		if (packetType.equals(0L)) { // sum

			result = values.stream().reduce(0L, Long::sum);
		} 

		else if (packetType.equals(1L)) { // product
			result = values.stream().reduce(1L, (a, b) -> a * b);
		}

		else if (packetType.equals(2L)) { // minimum
			result = values.stream().reduce(Long.MAX_VALUE, (a, b) -> Long.min(a, b));
		}

		else if (packetType.equals(3L)) { // maximum
			result = values.stream().reduce(0L, (a, b) -> Long.max(a, b));
		}

		else if (packetType.equals(5L)) { // greater than
			result = values.get(0) > values.get(1) ? 1 : 0;
		}

		else if (packetType.equals(6L)) { // greater than
			result = values.get(0) < values.get(1) ? 1 : 0;
		}

		else if (packetType.equals(7L)) { // greater than
			result = values.get(0).equals(values.get(1)) ? 1 : 0;
		}

		return result;

	}

	static class EatBits {
		private String bits;
		private int pos;
		private long version;

		public EatBits(String bits) {
			this.bits = bits;
			this.pos = 0;
			this.version = 0L;
		}

		public int pos() {
			return this.pos;
		}

		public String eat(int n) {
			String b = this.bits.substring(this.pos, this.pos + n);
			this.pos += n;
			return b;
		}

		public void addToVersion(long n) {
			this.version += n;
		}

		public long version() {
			return this.version;
		}
	}

	public static long decode(EatBits bits) {
		long version = binaryToDecimal(bits.eat(3));
		Long packetType = binaryToDecimal(bits.eat(3));
		bits.addToVersion(version);

		// System.out.println("Version: " + version + " packet type: " + packetType);

		if (packetType.equals(4L)) {

			String literal = "";
			while (true) {
				String firstBit = bits.eat(1);

				literal += bits.eat(4);
				if (firstBit.equals("0")) 
					return binaryToDecimal(literal);
			}

		} 

		List<Long> results = new ArrayList<>();
		
		String lengthTypeID = bits.eat(1);

		if (lengthTypeID.equals("0")) {
			long length = binaryToDecimal(bits.eat(15));
			long end = bits.pos() + length;
			while (bits.pos() < end) {
				results.add(decode(bits));
			}
		} else {
			long numSubpackets = binaryToDecimal(bits.eat(11));
			for (int i = 0; i < numSubpackets; i++) {
				results.add(decode(bits));
			}
		}

		// System.out.println(packetType + " " + results);
		return doMath(packetType, results);

	}

	public static void main(String[] args) {
		// decode(convertToBinary("D2FE28"));
		// decode(convertToBinary("38006F45291200"));
		// decode(convertToBinary("EE00D40C823060"));
		// decode(convertToBinary("8A004A801A8002F478"));
		// decode(convertToBinary("620080001611562C8802118E34"));
		// decode(convertToBinary("C0015000016115A2E0802F182340"));
		// decode(convertToBinary

		// decode(convertToBinary("C200B40A82")); // sum [1, 2]
		// decode(convertToBinary("04005AC33890")); // product [6, 9]
		// decode(convertToBinary("880086C3E88112")); // minimum [7, 8, 9]
		// decode(convertToBinary("CE00C43D881120")); // maximum [7, 8, 9]
		// decode(convertToBinary("D8005AC2A8F0")); // less than [5, 15] -> 1
		// decode(convertToBinary("F600BC2D8F")); // greater than [5, 15] -> 0
		// decode(convertToBinary("9C005AC2F8F0")); // equal [5, 15] -> 0
		// decode(convertToBinary("9C0141080250320F1802104A08")); // 1 + 3 = 2 * 2 -> 1


		// decode(convertToBinary("9C0141080250320F1802104A08"));
		EatBits bits = new EatBits(convertToBinary
		System.out.println(decode(bits));
		System.out.println(bits.version());
		// decode(convertToBinary
	}
}
